using System;using System.Collections;
using System.ComponentModel;
using System.Security.Cryptography.X509Certificates;
using CypherCrescent.Units.Contracts;

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#
    var list = Deserialise();
    for (Int32 i = 0; i < list.Count(); ++i)
    {
        if (string.IsNullOrEmpty(list[i])) continue;
        #>
namespace CypherCrescent.Units.Variables
{
    /*
     * ===================================================================================
     * THIS IS AN AUTOGENERATED CLASS FROM THE CYPHERCRESCENT VARIABLE SYSTEM. 
     * CHANGES TO THIS FILE WILL BE OVERWRITTEN BY NEWER FILE GENERATIONS.
     * ===================================================================================
     */
    public sealed class <#= list[i]#> : VariableBase
    {
        public <#= list[i]#>()
        {
            Name = "<#= list[i]#>";
        }
        public <#= list[i]#>(double displayValue):base()
        {
            DatabaseValue = displayValue;
            Name = "<#= list[i]#>";
        }


        public static implicit operator <#= list[i]#>(double displayValue) => new <#= list[i]#>(displayValue);
        public static implicit operator double(<#= list[i]#> variable) => variable.DatabaseValue ?? 0;
    }
}
        <#
SaveOutput(list[i] + ".cs");
    }
#>

<#+
    private void SaveOutput(string outputFileName) {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        var outputFilePath = Path.Combine(templateDirectory , @$"Variables\{outputFileName}");
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

    private List<string> Deserialise()
    {
        var xmlFilePath = Host.ResolvePath("Variables.csv");
        var lines = File.ReadAllLines(xmlFilePath);
        return lines.Select(line => line.Split(',')[0]).Skip(1).ToList();
    }
#>